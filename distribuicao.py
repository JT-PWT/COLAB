# -*- coding: utf-8 -*-
"""Distribuicao.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aAAMiMfHu03NFO_1_jOdD3wiwASkOWt7
"""

from scipy.stats import binom
'''Sintaxe: binom.pmf(k , n, p)
k: nº de sucesso que vc quer calcular. Nº de vezes que o evento desejado ocorre
em um determinado nº de tentativas
n nº total de tentativas ou experimentos. Cada tentativas tem dois resultados: secesso ou falha
p: é a probabilidade do sucesso em uma punica tentativa. Valor entre 0 e 1,
0: sucesso impossível
1: sucesso garantido
'''

#Lnçar uma moeda 5 vezes e querer saber a probabilidaade d obter exatamente 3 caras.
#Calcular a probabilidade de sucesso
k = 3 #sucesso
n = 5 #nº de tentativas
p = 0.5 #probabilidade de sucesso

#Função de massa de probabilidade
probabilidade = binom.pmf(k, n, p)
print(f'A probabilidade de obter exatamente {k} caras em {n} lançamentos é de {probabilidade:.4f}')

#Qual a probalidade de obter no máximo 3 caras no contexto?
#CPF: Função de Distribuição Cumulativa
probabilidade_no_maximo = binom.cdf(k, n, p)
print(f'A probabilidade de no máximo {k} sucessos: {probabilidade_no_maximo}')

'''Em uma campanha de vendas, um vendedor realiza 3 visitas a clientes protenciais.
A probabilidade de fechar uma venda em cada visita é de 30%. Qual é a probabilidade de
não fechar nenhuma venda em todas as visitas?'''
k = 0 #sucesso
n = 3 #Nº de tentativas
p = 0.3 #probabilidade de sucesso
probabilidade_zero = binom.pmf(k, n, p)
print(f'A probabilidade de o vendas em 3 visitas é: {probabilidade_zero:.3f}')

def binomial ():
  from scipy.stats import binom
  p = float(input('Imforme a probabilidade de sucesso: '))
  n = int(input('Informe o nº de tentativas: '))
  k = int(input('Informe o nº de sucessos desejados:'))

  probabilidade = binom.pmf(k, n, p)
  print(f'A probabilidade de {k} vendas em {n} visitas é de: {probabilidade:.4f}) ou {probabilidade*100:.1f}%')

binomial()

#num10 = (p**k)(((1-p)**(n-k)))
import math
pmf = math.comb(n, k) * (p**k) * ((1-p)**(n-k))
print(pmf)

#Calcule a probabilidade de ao menos 2 vendas
# P(k>=2) = P(k+3)
p_maior_igual_2 = 1 - binom.cdf(1, 3, 0.3) #probabilidade de obter no máxmo 1 sucesso
print(f'A probabilidade de ao menos 2 vendas é: {p_maior_igual_2:.4f}')

# Calcule a probabillidade de no máximo 2vendas
#P(k <=2) = P(k+0) + P(k=1) P(k=2)
p_acumulado_2 = binom.cdf(2, 3, 0.3)
print(f'{p_acumulado:.4f} ou {p_acumulado_2*100:.1f}%')

# Calcule a probabilidade de mais duas vendas
# P(k>2) = P(k=3) ou 1 - P(k<=2)
p_maior_2 = 1 - binom.cdf(2, 3, 0.3)
print(f'{p_maior_2:.3f} ou {p_maior_2*100:.1f}%')
#Calcule a probalidade de exatamente 3 vendas

sucesso = 3  #sucesso
tentativas = 3  #Nº de tentativas
probabilidade_sucesso = 0.3 #probabilidade de sucesso

p_vendas = binom.pmf(sucesso, tentativas, probabilidade_sucesso)
print(f'A probabilidade de exatamente {k} vendas é de: {p_vendas:.3f}%')

'''Um curso de treinamento aumenta a produtividade dos funcionários de uma certa empresa
em 80% dos casos. Se dez funcionários são selecionados ao acaso para receber esse treinamento,
encontre a probabilidade de: (segundo uma distribuição binomial)
n = 10
p = 0.8

a) Exatamente sete funcionários aumentarem a produtividade: P(k =7)

b) Não mais que oito funcionários aumentarem a produtividade: P(k <=8)

c) Pelo menos três funcionários aumentarem a produtividade: P(k >=3)
'''
#a) Exatamente sete funcionários aumentarem a produtividade: P(k =7)
n = 10
p = 0.8
k = 7

from scipy.stats import binom
binom.pmf(k,n,p)

probabilidade_sete_funcio= binom.pmf(k, n, p)
print(f'A probabilidade de sete funcionários aumentarem a produtividade é: {probabilidade_sete_funcio:.3f} ou {probabilidade_sete_funcio*100:.1f}%')

#b) Não mais que oito funcionários aumentarem a produtividade: P(k <=8)
probabilidade_oito_funcio= binom.cdf(8, n, p)
print(f'A probabilidade de oito funcionários aumentarem a produtividade é: {probabilidade_oito_funcio:.3f} ou {probabilidade_sete_funcio*100:.1f}%')

#c) Pelo menos três funcionários aumentarem a produtividade: P(k >=3)
probabilidade_pelo_menos_tres_funcio = 1 - binom.cdf(2, n, p)
print(f'A probabilidade de pelo menos três funcionários aumentarem a produtividade é: {probabilidade_sete_funcio:.3f} ou {probabilidade_sete_funcio*100:.1f}%')
#distribuição acumulada.

'''Muitas pessoas usam uma técnica de controle de qualidade chamada de amostragem de aceitação para monitorar o
carregamento de chegada de peças, matéria-primas e assim por diamte